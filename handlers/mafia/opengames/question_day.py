from loader import dp
from states.registration import OpenGames
from validation.validation import proccess_validate_day
from keyboards.default import (
    days_31_keyboard,
    days_30_keyboard,
    days_28_keyboard
)

from aiogram.types import Message
from aiogram.dispatcher import FSMContext


@dp.message_handler(state=OpenGames.month)
async def process_question_day(message: Message, state: FSMContext):
    async with state.proxy() as data:
        month = message.text
        data['month'] = month
        if  month == '–Ø–Ω–≤–∞—Ä—å' or month == '–ú–∞—Ä—Ç' or month == '–ú–∞–π' \
        or month == '–ò—é–ª—å' or month == '–ê–≤–≥—É—Å—Ç' or month == '–û–∫—Ç—è–±—Ä—å' \
        or month == '–î–µ–∫–∞–±—Ä—å':
            await message.answer('''
        üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è
        ''', reply_markup=days_31_keyboard)
        elif month == '–§–µ–≤—Ä–∞–ª—å':
            await message.answer('''
        üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è
        ''', reply_markup=days_28_keyboard)
        else:
            await message.answer('''
        üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è
        ''', reply_markup=days_30_keyboard)
    await OpenGames.next()


@dp.message_handler(lambda message: proccess_validate_day(message), state=OpenGames.day)
async def process_day_invalid(message: Message):
    await message.reply("–û—à–∏–±–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω–æ–≤–æ:")